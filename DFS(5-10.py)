#N, M을 공백으로 구분하여 입력받기
#input() -> 괄호 안에 아무것도 적지 않은 것이 기본형으로 이러한 경우, 공백으로 입력란만이 나옴
#입력값을 2개 이상으로 구분하려면 split함수를 이용 <- 띄어쓰기를 기준으로 나눔
#map의 경우, 3 4를 입력하면 n에는 3이 m에는 4가 정수형으로 저장됨
n, m = map(int, input().split())

# 2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
  graph.append(list(map(int, input())))
  
#DFS로 특정한 노드를 방문한 뒤에 연결된 모든 노드들도 방문
def dfs(x, y):
  #주어진 범위를 벗어나는 경우에는 즉시 종료
  if x <= -1 or x >=n or y <= -1 or y >=m:
    return false
    
  #현재 노드를 아직 방문하지 않았다면, 즉 값이 0이라면
  if graph[x][y] == 0:
    #해당 노드를 방문처리
    graph[x][y] = 1
    
    #상, 하, 좌, 우 방문 -> 재귀함수 이용
    #상, 하, 좌, 우가 모두 false일 때, true가 한번 return됨
    dfs(x - 1, y)
    dfs(x + 1, y)
    dfs(x, y - 1)
    dfs(x, y + 1)
    return true;
return false

#모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
  for j in range(m):
    if dfs(i, j) == true:
      result += 1
      
print(result)

  
